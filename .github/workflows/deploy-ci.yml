name: Deploy Platform application with ArgoCD

on:
  workflow_call:

env:
  CONTAINER_REGISTRY: ghcr.io
  CI_ENVIRONMENT_SLUG: ${{ github.ref == 'refs/heads/main' && 'prd' || 'dev'}}
  NAMESPACE: ${{ github.event.repository.name }}
  PROJECT_NAME: ${{ github.event.repository.name }}-${{ github.ref == 'refs/heads/main' && 'prd' || 'dev'}}
  ENV_SECRETS: ${{ github.ref == 'refs/heads/main' && secrets.ENV_SECRETS_PRD || secrets.ENV_SECRETS_DEV }}
  APP_VALUES: ${{ github.ref == 'refs/heads/main' && 'values.prd.yaml' || 'values.dev.yaml' }}
  ARGOCD_SERVER: grafana.zinderlabs.com
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
  HELM_CHART_PATH: helm/platform-app
  KUBERNETES_DEST: https://kubernetes.default.svc
  MANIFEST_REPO: git@github.com:zinderlabs/.github.git
  PROJECT: platform-apps
  SYNC_POLICY: ${{ github.ref == 'refs/heads/main' && 'none' || 'automated' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Checkout repository workflow resources
        uses: actions/checkout@v4
        with:
          repository: zinderlabs/.github
          path: ci-central

      - name: Copy Helm charts to main repository
        run: |
          mkdir -p ${{ env.HELM_CHART_PATH }}
          cp -R ci-central/helm/platform-app/* ${{ env.HELM_CHART_PATH }}/

      - name: Create secret hash
        run: |
          if [ -n "${{ env.ENV_SECRETS }}" ]; then
            SECRET_HASH=$(echo -n "${{ env.ENV_SECRETS }}" | sha512sum | awk '{print $1}')
          else
            SECRET_HASH="nosecrets"
          fi
          echo "SECRET_HASH=$SECRET_HASH" >> $GITHUB_ENV
          echo "CI_PROJECT_NAME=${{ env.PROJECT_NAME }}" >> $GITHUB_ENV

      - name: Setup ArgoCD CLI
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          command: version
          options: |
            --client
            --grpc-web
            --loglevel debug
            --logformat json

      - name: Configure ArgoCD CLI
        run: |
          argocd repo add ${{ github.server_url }}/${{ github.repository }}.git --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --upsert --grpc-web --loglevel debug --logformat json

      - name: Substitute variables in values.yaml
        run: |
          envsubst < ${{ github.workspace }}/${{ env.APP_VALUES }} > substituted_values.yaml
          cat substituted_values.yaml

      - name: Apply ArgoCD Application
        env:
          APP_SECRETS: ${{ env.ENV_SECRETS }}
        run: |
          HELM_SET_ARGS=""
          while IFS='=' read -r key value; do
            HELM_SET_ARGS="$HELM_SET_ARGS --helm-set appSecrets.$key=$value"
          done <<< "$APP_SECRETS"

          argocd app create ${{ env.PROJECT_NAME }} --upsert \
          --loglevel debug \
          --logformat json \
          --repo ${{ env.MANIFEST_REPO }} \
          --path ${{ env.HELM_CHART_PATH }} \
          --dest-server ${{ env.KUBERNETES_DEST }} \
          --dest-namespace ${{ env.NAMESPACE }} \
          --revision ${{ github.ref == 'refs/heads/main' && 'main' || 'dev'}} \
          --server ${{ env.ARGOCD_SERVER }} \
          --auth-token ${{ env.ARGOCD_AUTH_TOKEN }} \
          --grpc-web \
          --project ${{ env.PROJECT }} \
          --helm-set imageCredentials.registry=${{ env.CONTAINER_REGISTRY }} \
          --helm-set imageCredentials.token=${{ secrets.CONTAINER_REGISTRY_TOKEN }} \
          --helm-set deployment.pathSlug=${{ github.event.repository.name }} \
          --helm-set deployment.image=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ github.ref == 'refs/heads/main' && 'prd' || 'dev'}}:${{ github.ref == 'refs/heads/main' && 'main' || 'dev'}} \
          --helm-set deployment.environment=${{ env.CI_ENVIRONMENT_SLUG }} \
          --helm-set deployment.namespace=${{ env.NAMESPACE }} \
          --helm-set secretHash=${{ env.SECRET_HASH }} \
          $HELM_SET_ARGS \
          --values-literal-file ${{ github.workspace }}/substituted_values.yaml \
          --sync-policy ${{ env.SYNC_POLICY }} \
          --sync-option CreateNamespace=true
