name: Deploy Platform application to K8s

on:
  workflow_call:

env:
  CONTAINER_REGISTRY: ghcr.io
  HELM_VALUES: ${{ github.workspace }}/ci-central/workflow-resources/helm/platform/values.yaml
  PROJECT_NAME: ${{ github.event.repository.name }}-${{ github.ref == 'refs/heads/main' && 'prd' || 'dev'}}
  PROJECT_NAMESPACE: ${{ github.event.repository.name }}-${{ github.repository_id }}-${{ github.ref == 'refs/heads/main' && 'prd' || 'dev'}}
  ENV_SECRETS: ${{ github.ref == 'refs/heads/main' && secrets.ENV_SECRETS_PRD || secrets.ENV_SECRETS_DEV }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository (which repository triggered this workflow)
      - name: Checkout repository ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          path: main

      # Checkout the current repository (which we're currently in)
      - name: Checkout repository workflow resources
        uses: actions/checkout@v4
        with:
          repository: zinderlabs/.github
          path: ci-central

      - name: Set up kubeconfig manually
        run: |
          mkdir ${HOME}/.kube
          echo "$KUBECONFIG" | base64 --decode > ${HOME}/.kube/config
          chmod 600 ${HOME}/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Verify kubeconfig file
        run: |
          echo "Kubeconfig directory contents:"
          ls -la ${HOME}/.kube

          if [ -s ${HOME}/.kube/config ]; then
          echo "Kubeconfig file exists and is not empty"
          file_size=$(du -b ${HOME}/.kube/config | cut -f1)
          echo "Kubeconfig file size: $file_size bytes"
          else
          echo "Kubeconfig file is either empty or does not exist"
          fi

      - name: Check kubectl full configuration
        run: |
          kubectl config view --minify --flatten --output=yaml | grep -v "data:" | grep -v "token:"

      - name: Check kubectl configuration
        run: |
          echo "Available contexts:"
          kubectl config get-contexts

          echo "Current context:"
          kubectl config current-context

          echo "Cluster endpoint:"
          kubectl config view -o jsonpath='{.clusters[*].cluster.server}'

      - name: Check cluster connectivity
        run: |
          echo "Attempting to connect to the cluster..."
          kubectl cluster-info

      - name: Check kubectl version
        run: kubectl version --client

      - name: Create secret in K8s for accessing the container registry
        run: kubectl create namespace ${{ env.PROJECT_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secret in K8s for accessing the container registry
        run: kubectl create secret docker-registry github-registry \
          --namespace=${{ env.PROJECT_NAMESPACE }} \
          --docker-server=${{ env.CONTAINER_REGISTRY }} \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secret in K8s for the application
        run: kubectl create secret generic app-secret \
          --namespace=${{ env.PROJECT_NAMESPACE }} \
          --from-literal=APP_SECRET=${{ env.ENV_SECRETS }} \
          --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secret hash and source env variables
        run: |
          SECRET_HASH=$(echo -n $ENV_SECRET | sha512sum)
          set -o allexport; source $ENV_SECRET; set +o allexport

      - name: Substitute environment variables in Helm values file
        uses: mshick/fast-envsubst@v1
        with:
          in-file: ${{ env.HELM_VALUES }}
          out-file: ${{ github.workspace }}/values-new.yaml

      - name: Debug check new helm values file
        run: |
          cat ${{ github.workspace }}/values-new.yaml || echo "No values file"

    #   - name: Deploy application using helm
    #     uses: WyriHaximus/github-action-helm3@v3
    #     with:
    #       #TODO
    #       exec: |
